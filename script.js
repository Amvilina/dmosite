document.addEventListener('DOMContentLoaded', function() {
    
    const navLinks = document.querySelectorAll('.main-nav__link[data-section]');
    const heroTitle = document.getElementById('hero-title');
    const sectionTitle = document.getElementById('section-title');
    const priceSubtitle = document.getElementById('price-subtitle');
    const priceTableWrappers = document.querySelectorAll('.price-table__wrapper');
    
    
    const sectionData = {
        disinfection: {
            heroTitle: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –ø–æ–º–µ—â–µ–Ω–∏–π –≤ –ú–æ—Å–æ–±–ª–∞—Å—Ç–∏',
            sectionTitle: '–ü—Ä–∞–π—Å –±—ã—Ç–æ–≤—ã–µ –Ω–∞—Å–µ–∫–æ–º—ã–µ/–¥–µ–∑–∏–Ω—Å–µ–∫—Ü–∏—è',
            subtitle: '–∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞'
        },
        rodents: {
            heroTitle: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–µ—Ä–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç –≥—Ä—ã–∑—É–Ω–æ–≤ –≤ –ú–æ—Å–æ–±–ª–∞—Å—Ç–∏',
            sectionTitle: '–ü—Ä–∞–π—Å –≥—Ä—ã–∑—É–Ω—ã/–¥–µ—Ä–∞—Ç–∏–∑–∞—Ü–∏—è - —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –æ—Ç—Ä–∞–≤—ã-–ø—Ä–∏–º–∞–Ω–∫–∏',
            subtitle: '—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≥—Ä—ã–∑—É–Ω–æ–≤'
        },
        country: {
            heroTitle: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—á–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ –≤ –ú–æ—Å–æ–±–ª–∞—Å—Ç–∏',
            sectionTitle: '–ü—Ä–∞–π—Å –¥–∞—á–Ω—ã–µ –≤—Ä–µ–¥–∏—Ç–µ–ª–∏',
            subtitle: '–∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–∞–¥–æ–≤—ã—Ö –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π'
        },
        mold: {
            heroTitle: '–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–µ—Å–µ–Ω–∏ –∏ –≥—Ä–∏–±–∫–∞ –≤ –ú–æ—Å–æ–±–ª–∞—Å—Ç–∏',
            sectionTitle: '–ü—Ä–∞–π—Å –ø–ª–µ—Å–µ–Ω—å',
            subtitle: '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç –ø–ª–µ—Å–µ–Ω–∏ –∏ –≥—Ä–∏–±–∫–∞'
        },
        smells: {
            heroTitle: '–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö –∑–∞–ø–∞—Ö–æ–≤ –≤ –ú–æ—Å–æ–±–ª–∞—Å—Ç–∏',
            sectionTitle: '–ü—Ä–∞–π—Å –∑–∞–ø–∞—Ö–∏',
            subtitle: '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞'
        },
        'all-services': {
            heroTitle: '–ü–æ–ª–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–∞ –≤—Å–µ —É—Å–ª—É–≥–∏ –≤ –ú–æ—Å–æ–±–ª–∞—Å—Ç–∏',
            sectionTitle: '–í—Å–µ —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã –∫–æ–º–ø–∞–Ω–∏–∏',
            subtitle: '–≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —É—Å–ª—É–≥—É'
        }
    };

    
    
    
    function _0xDecrypt(_0xParts) {
        
        let _0xCombined = _0xParts.join('');
        
        
        let _0xDecoded = atob(_0xCombined);
        
        
        let _0xResult = '';
        for (let i = 0; i < _0xDecoded.length; i++) {
            const key = (i % 10) + 112;
            _0xResult += String.fromCharCode(_0xDecoded.charCodeAt(i) ^ key);
        }
        
        return _0xResult;
    }
    
    
    const _0xTokenData = {
        "botId": ["SEVARk", "ZMR0NA", "Sg=="],
        "botKey": ["MTA6Mh1CICgMPj8/", "HBQ1RD4jCzg+GCcU", "DBwyOU8JJUcZPTk="]
    };
    
    const _0xChatData = [""];
    
    
    const _0xBotId = _0xDecrypt(_0xTokenData.botId);
    const _0xBotKey = _0xDecrypt(_0xTokenData.botKey);
    const _0xChatId = _0xDecrypt(_0xChatData);
    
    
    const TELEGRAM_BOT_TOKEN = _0xBotId + ':' + _0xBotKey;
    const TELEGRAM_CHAT_ID = _0xChatId;

    
    async function sendToTelegram(phone, formName) {
        const time = new Date().toLocaleString('ru-RU');
        
        
        let currentSection = '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞';
        const activeWrapper = document.querySelector('.price-table__wrapper.active');
        if (activeWrapper) {
            const section = activeWrapper.dataset.section;
            const sectionNames = {
                'disinfection': '–î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è',
                'rodents': '–ì—Ä—ã–∑—É–Ω—ã', 
                'country': '–î–∞—á–Ω—ã–µ –≤—Ä–µ–¥–∏—Ç–µ–ª–∏',
                'mold': '–ü–ª–µ—Å–µ–Ω—å',
                'smells': '–ó–∞–ø–∞—Ö–∏',
                'all-services': '–í—Å–µ —É—Å–ª—É–≥–∏'
            };
            currentSection = sectionNames[section] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª';
        }
        
        
        const siteName = window.location.hostname || '–æ–±–ª–∞—Å—Ç–Ω–∞—è-–¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è.—Ä—Ñ';
        
        const message = `üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!</b>

üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>${phone}</code>
üìÑ –§–æ—Ä–º–∞: ${formName}
üìç –†–∞–∑–¥–µ–ª: ${currentSection}
üåê –°–∞–π—Ç: ${siteName}
üïê –í—Ä–µ–º—è: ${time}

üí¨ –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!`;

        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        
        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: TELEGRAM_CHAT_ID,
                    text: message,
                    parse_mode: 'HTML'
                })
            });
            
            const result = await response.json();
            return result.ok;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
            return false;
        }
    }

    
    function validatePhone(phone) {
        const cleanPhone = phone.replace(/\D/g, '');
        return cleanPhone.length >= 10;
    }

    
    function formatPhone(phone) {
        const cleaned = phone.replace(/\D/g, '');
        if (cleaned.length >= 10) {
            const match = cleaned.match(/^(\d{1})(\d{3})(\d{3})(\d{2})(\d{2})$/);
            if (match) {
                return `+7 (${match[2]}) ${match[3]}-${match[4]}-${match[5]}`;
            }
        }
        return phone;
    }

    
    function showNotification(message, isSuccess = true) {
        const oldNotifications = document.querySelectorAll('.notification');
        oldNotifications.forEach(n => n.remove());
        
        const notification = document.createElement('div');
        notification.className = `notification ${isSuccess ? 'notification--success' : 'notification--error'}`;
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.classList.add('notification--show');
        }, 10);
        
        setTimeout(() => {
            notification.classList.remove('notification--show');
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, 3000);
    }

    
    async function handleFormSubmit(form, formName) {
        const phoneInput = form.querySelector('input[type="tel"]');
        const phone = phoneInput.value;
        
        if (!validatePhone(phone)) {
            showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', false);
            phoneInput.focus();
            return;
        }
        
        const submitButton = form.querySelector('button[type="submit"]');
        const originalText = submitButton.textContent;
        submitButton.disabled = true;
        submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
        
        const formattedPhone = formatPhone(phone);
        const success = await sendToTelegram(formattedPhone, formName);
        
        if (success) {
            showNotification('–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è');
            phoneInput.value = '';
        } else {
            showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é', false);
        }
        
        submitButton.disabled = false;
        submitButton.textContent = originalText;
    }

    

    function initFAQ() {
        const faqItems = document.querySelectorAll('.faq__item');
        
        faqItems.forEach(item => {
            const question = item.querySelector('.faq__question');
            const answer = item.querySelector('.faq__answer');
            
            answer.removeAttribute('hidden');
            
            question.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                
                const isExpanded = question.getAttribute('aria-expanded') === 'true';
                
                const column = item.parentElement;
                column.querySelectorAll('.faq__item').forEach(otherItem => {
                    const otherQuestion = otherItem.querySelector('.faq__question');
                    const otherAnswer = otherItem.querySelector('.faq__answer');
                    
                    if (otherItem !== item) {
                        otherQuestion.setAttribute('aria-expanded', 'false');
                        otherAnswer.classList.remove('active');
                    }
                });
                
                if (!isExpanded) {
                    question.setAttribute('aria-expanded', 'true');
                    answer.classList.add('active');
                } else {
                    question.setAttribute('aria-expanded', 'false');
                    answer.classList.remove('active');
                }
            });
        });
    }

    initFAQ();

    function initReviewsSlider() {
        const slider = document.getElementById('reviews-slider');
        if (!slider) return;
        
        const slides = slider.querySelector('.reviews__slides');
        const slideElements = slider.querySelectorAll('.reviews__slide');
        const prevBtn = document.querySelector('.reviews__arrow--prev');
        const nextBtn = document.querySelector('.reviews__arrow--next');
        const dots = document.querySelectorAll('.reviews__dot');
        
        let currentSlide = 0;
        const totalSlides = slideElements.length;
        
        function updateSlider() {
            slides.style.transform = `translateX(-${currentSlide * 100}%)`;
            
            slideElements.forEach((slide, index) => {
                slide.classList.toggle('reviews__slide--active', index === currentSlide);
            });
            
            dots.forEach((dot, index) => {
                dot.classList.toggle('reviews__dot--active', index === currentSlide);
            });
        }
        
        function nextSlide() {
            currentSlide = (currentSlide + 1) % totalSlides;
            updateSlider();
        }
        
        function prevSlide() {
            currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
            updateSlider();
        }
        
        nextBtn?.addEventListener('click', nextSlide);
        prevBtn?.addEventListener('click', prevSlide);
        
        dots.forEach((dot, index) => {
            dot.addEventListener('click', () => {
                currentSlide = index;
                updateSlider();
            });
        });
        
        setInterval(nextSlide, 5000);
    }

    initReviewsSlider();

    
    function initDiscountTimer() {
        const timerElement = document.getElementById('discount-timer');
        if (!timerElement) return;
        
        const now = new Date();
        const endOfDay = new Date(now);
        endOfDay.setHours(23, 59, 59, 999);
        
        function updateTimer() {
            const now = new Date();
            const timeLeft = endOfDay - now;
            
            if (timeLeft <= 0) {
                endOfDay.setDate(endOfDay.getDate() + 1);
                return;
            }
            
            const hours = Math.floor(timeLeft / (1000 * 60 * 60));
            const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
            
            const formattedTime = 
                String(hours).padStart(2, '0') + ' : ' +
                String(minutes).padStart(2, '0') + ' : ' +
                String(seconds).padStart(2, '0');
            
            timerElement.textContent = formattedTime;
        }
        
        updateTimer();
        setInterval(updateTimer, 1000);
    }

    initDiscountTimer();

    
    function addCallbackForms() {
        const formTemplate = document.querySelector('.callback-form-template');
        if (!formTemplate) return;
        
        document.querySelectorAll('.callback-form').forEach(form => {
            if (!form.parentElement.classList.contains('callback-form-template')) {
                form.remove();
            }
        });
        
        priceTableWrappers.forEach(wrapper => {
            if (wrapper.classList.contains('active')) {
                const formClone = formTemplate.querySelector('.callback-form').cloneNode(true);
                wrapper.appendChild(formClone);
            }
        });
    }
    
    
    function switchSection(section) {
        navLinks.forEach(link => {
            link.classList.remove('main-nav__link--active');
            if (link.dataset.section === section) {
                link.classList.add('main-nav__link--active');
            }
        });
        
        if (sectionData[section]) {
            heroTitle.textContent = sectionData[section].heroTitle;
            sectionTitle.textContent = sectionData[section].sectionTitle;
            priceSubtitle.textContent = sectionData[section].subtitle;
        }
        
        priceTableWrappers.forEach(wrapper => {
            if (wrapper.dataset.section === section) {
                wrapper.classList.add('active');
            } else {
                wrapper.classList.remove('active');
            }
        });
        
        setTimeout(addCallbackForms, 10);
    }
    
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const section = this.dataset.section;
            if (section) {
                switchSection(section);
            }
        });
    });
    
    
    const methodTabs = document.querySelectorAll('.methods__tab');
    const methodContents = document.querySelectorAll('.methods__item');
    
    methodTabs.forEach(tab => {
        tab.addEventListener('click', function() {
            const targetTab = this.dataset.tab;
            
            methodTabs.forEach(t => t.classList.remove('methods__tab--active'));
            this.classList.add('methods__tab--active');
            
            methodContents.forEach(content => {
                if (content.classList.contains('methods__item--active')) {
                    content.classList.add('methods__item--hiding');
                    setTimeout(() => {
                        content.classList.remove('methods__item--active', 'methods__item--hiding');
                    }, 300);
                }
            });
            
            setTimeout(() => {
                methodContents.forEach(content => {
                    if (content.dataset.content === targetTab) {
                        content.classList.add('methods__item--active');
                    }
                });
            }, 300);
        });
    });
    
    switchSection('disinfection');

    
    function initScrollTop() {
        const scrollBtn = document.querySelector('.scroll-top');
        if (!scrollBtn) return;
        
        window.addEventListener('scroll', () => {
            if (window.pageYOffset > 300) {
                scrollBtn.classList.add('visible');
            } else {
                scrollBtn.classList.remove('visible');
            }
        });
        
        scrollBtn.addEventListener('click', () => {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });
    }

    initScrollTop();

    
    
    
    const heroForm = document.querySelector('.hero__form');
    if (heroForm) {
        heroForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            await handleFormSubmit(this, '–ì–ª–∞–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ (—à–∞–ø–∫–∞ —Å–∞–π—Ç–∞)');
        });
    }
    
    
    const discountForm = document.querySelector('.discount__form');
    if (discountForm) {
        discountForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            await handleFormSubmit(this, '–§–æ—Ä–º–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π 25%');
        });
    }
    
    
    document.addEventListener('submit', async function(e) {
        if (e.target.classList.contains('callback-form__form')) {
            e.preventDefault();
            
            const activeSection = document.querySelector('.price-table__wrapper.active');
            let sectionName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª';
            
            if (activeSection) {
                const section = activeSection.dataset.section;
                const sectionNames = {
                    'disinfection': '–î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è',
                    'rodents': '–ì—Ä—ã–∑—É–Ω—ã',
                    'country': '–î–∞—á–Ω—ã–µ –≤—Ä–µ–¥–∏—Ç–µ–ª–∏',
                    'mold': '–ü–ª–µ—Å–µ–Ω—å',
                    'smells': '–ó–∞–ø–∞—Ö–∏',
                    'all-services': '–í—Å–µ —É—Å–ª—É–≥–∏'
                };
                sectionName = sectionNames[section] || section;
            }
            
            await handleFormSubmit(e.target, `–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (${sectionName})`);
        }
    });
    
    
    const phoneInputs = document.querySelectorAll('input[type="tel"]');
    phoneInputs.forEach(input => {
        input.addEventListener('input', function(e) {
            let value = e.target.value.replace(/\D/g, '');
            if (value.length > 0) {
                if (value[0] === '8') {
                    value = '7' + value.slice(1);
                }
                let formatted = '+7';
                if (value.length > 1) {
                    formatted += ' (' + value.slice(1, 4);
                }
                if (value.length >= 4) {
                    formatted += ') ' + value.slice(4, 7);
                }
                if (value.length >= 7) {
                    formatted += '-' + value.slice(7, 9);
                }
                if (value.length >= 9) {
                    formatted += '-' + value.slice(9, 11);
                }
                e.target.value = formatted;
            }
        });
    });
});